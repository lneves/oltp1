name: Build & Release (manual)

on:
  workflow_dispatch:

permissions:
  contents: write   # needed for creating releases & uploading assets

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build natives (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up GraalVM + native-image
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '21'
          distribution: 'graalvm'
          cache: 'maven'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: MSVC env (Windows)
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Build (Maven native profile)
        run: mvn -Pnative -DskipTests package

      # Package both executables into one tar.gz per OS
      - name: Package tar.gz (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          mkdir -p dist
          TARBALL="dist/oltp1-${{ runner.os }}-${{ runner.arch }}.tar.gz"
          tar -czf "$TARBALL" -C target oltp1
          # Create SHA-256 checksum file alongside the tarball
          HASH=$(shasum -a 256 "$TARBALL" | awk '{print $1}')
          echo "$HASH  $(basename "$TARBALL")" > "$TARBALL.sha256"

      - name: Package tar.gz (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path dist | Out-Null
          $TARBALL = "dist/oltp1-${{ runner.os }}-${{ runner.arch }}.tar.gz"
          tar -czf $TARBALL -C target oltp1.exe
          # Create SHA-256 checksum file alongside the tarball
          $hash = (Get-FileHash -Algorithm SHA256 $TARBALL).Hash.ToLower()
          $bn = Split-Path -Leaf $TARBALL
          "$hash  $bn" | Out-File -NoNewline -Encoding ascii "$TARBALL.sha256"

      # Upload each OS bundle (tar.gz + .sha256) as an artifact
      - name: Upload bundle
        uses: actions/upload-artifact@v4
        with:
          name: bundle-${{ runner.os }}-${{ runner.arch }}
          path: |
            dist/*.tar.gz
            dist/*.tar.gz.sha256
          if-no-files-found: error
          retention-days: 14

  release:
    name: Create GitHub Release & upload assets
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: bundle-*
          merge-multiple: true
          path: release-assets

      - name: Show assets
        run: ls -la release-assets

      - name: Compute tag (UTC date + run number)
        run: echo "TAG=v$(date -u +%Y.%m.%d)-${{ github.run_number }}" >> $GITHUB_ENV

      - name: Create/Update Release and upload assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG }}
          name: "Release ${{ env.TAG }}"
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            release-assets/*.tar.gz
            release-assets/*.tar.gz.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
